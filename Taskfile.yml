---
# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, AWS EKS Pulumi Project!

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list
    silent: true

  # Setup Tasks
  setup:
    desc: "Complete setup: install dependencies, generate lockfile, and initialize stacks"
    cmds:
      - task: deps
      - task: lock
      - task: precommit:install
      - task: pulumi:init
        vars:
          env: staging
      - task: pulumi:init
        vars:
          env: production
    silent: true

  # Pulumi Dependencies
  deps:
    desc: "Install Python dependencies for Pulumi using uv and pyproject.toml (from pulumi directory)"
    dir: pulumi
    cmds:
      - uv sync --all-extras
    silent: true

  deps:upgrade:
    desc: "Upgrade Python dependencies for Pulumi using uv and pyproject.toml (from pulumi directory)"
    dir: pulumi
    cmds:
      - uv sync --all-extras --upgrade
    silent: true

  lock:
    desc: "Generate or update uv.lock from pyproject.toml using uv (from pulumi directory)"
    dir: pulumi
    cmds:
      - uv lock
      - echo "✓ Generated/updated uv.lock with pinned versions"
    silent: true

  # Code Quality
  lint:
    desc: "Lint Python code with ruff"
    cmds:
      - uv run ruff check pulumi --fix
    silent: true

  format:
    desc: "Format Python code with ruff"
    cmds:
      - uv run ruff format pulumi
    silent: true

  typecheck:
    desc: "Type-check Python code with pyright"
    dir: pulumi
    cmds:
      - uv run pyright
    silent: true

  check:
    desc: "Run all code quality checks (lint, format, typecheck)"
    cmds:
      - task: lint
      - task: format
      - task: typecheck
    silent: true

  precommit:install:
    desc: "Install pre-commit hooks to .git/hooks"
    cmds:
      - pre-commit install
    silent: true

  precommit:
    desc: "Run pre-commit hooks"
    cmds:
      - pre-commit run --all-files
    silent: true

  precommit:update:
    desc: "Update pre-commit hooks"
    cmds:
      - pre-commit autoupdate --repo https://github.com/pre-commit/pre-commit-hooks
    silent: true

  # Pulumi Stack Management
  pulumi:init:
    desc: "Initialize a new Pulumi stack"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack init {{.ENV}} || uv run pulumi stack select {{.ENV}}
      - uv run pulumi config set aws:region us-east-1
    silent: true

  pulumi:select:
    desc: "Select a Pulumi stack"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run --directory .. pulumi stack select {{.ENV}}
    silent: true

  # Infrastructure Management
  preview:
    desc: "Preview Pulumi changes for the selected environment"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi preview
    silent: true

  deploy:
    desc: "Deploy Pulumi infrastructure for the selected environment"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv sync
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi up --yes
    silent: true

  destroy:
    desc: "Destroy Pulumi infrastructure for the selected environment"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv sync
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi destroy --yes
    silent: true

  # Stack Information
  outputs:
    desc: "Show Pulumi stack outputs"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi stack output
    silent: true

  status:
    desc: "Show Pulumi stack status"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi stack
    silent: true

  info:
    desc: "Show detailed Pulumi stack information"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - echo "=== Stack Information ==="
      - source ../.venv/bin/activate && pulumi stack
      - echo ""
      - echo "=== Stack Outputs ==="
      - source ../.venv/bin/activate && pulumi stack output
    silent: true

  config:
    desc: "Show Pulumi stack configuration"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi config
    silent: true

  refresh:
    desc: "Refresh Pulumi stack state"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi refresh --yes
    silent: true

  cancel:
    desc: "Cancel currently running Pulumi operation"
    dir: pulumi
    cmds:
      - uv run pulumi cancel
    silent: true

  # EKS Management Tasks
  eks:scale:
    desc: "Scale EKS node group to desired size"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
      DESIRED_SIZE: '{{.desiredSize | default "2"}}'
      MAX_SIZE: '{{.maxSize | default "3"}}'
      MIN_SIZE: '{{.minSize | default "1"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - |
        CLUSTER_NAME=$(uv run pulumi stack output cluster_name 2>/dev/null | tr -d '"')
        NODE_GROUP_NAME=$(uv run pulumi stack output node_group_name 2>/dev/null | tr -d '"')
        REGION=$(uv run pulumi config get aws:region)

        if [ -n "$CLUSTER_NAME" ] && [ -n "$NODE_GROUP_NAME" ]; then
          aws eks update-nodegroup-config \
            --region $REGION \
            --cluster-name $CLUSTER_NAME \
            --nodegroup-name $NODE_GROUP_NAME \
            --scaling-config minSize={{.MIN_SIZE}},maxSize={{.MAX_SIZE}},desiredSize={{.DESIRED_SIZE}}
          echo "Node group scaled to {{.DESIRED_SIZE}} nodes (min: {{.MIN_SIZE}}, max: {{.MAX_SIZE}})"
        else
          echo "Error: Could not get cluster or node group name from stack outputs"
          exit 1
        fi
    silent: true

  eks:kubeconfig:
    desc: "Configure kubectl to access the EKS cluster"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi stack output kubectl_command | sh
    silent: true

  # AWS Tasks
  aws:whoami:
    desc: "Show details of the current AWS identity"
    cmds:
      - aws sts get-caller-identity
    silent: true

  # Kubernetes Tasks
  k8s:status:
    desc: "Show status of services and ingress"
    cmds:
      - echo "=== Nodes ==="
      - kubectl get nodes
      - echo ""
      - echo "=== Services ==="
      - kubectl get services
      - echo ""
      - echo "=== Ingresses ==="
      - kubectl get ingress 2>/dev/null || echo "No ingresses found"
      - echo ""
      - echo "=== Pods ==="
      - kubectl get pods --all-namespaces
    silent: true

  k8s:alb:domains:
    desc: "Show ALB domain names"
    cmds:
      - kubectl get ingress -o custom-columns="NAME:.metadata.name,DOMAIN:.status.loadBalancer.ingress[0].hostname"
    silent: true

  # Development Tasks
  pulumi:cmd:
    desc: "Run any Pulumi command (e.g., task pulumi:cmd env=staging -- stack output cluster_name)"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi {{.CLI_ARGS}}
    silent: true

  logs:
    desc: "View Pulumi operation logs"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi logs --follow
    silent: true

  # Configuration Management
  config:set:
    desc: "Set a configuration value (e.g., task config:set env=staging key=node-disk-size value=200)"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
      KEY: '{{.key}}'
      VALUE: '{{.value}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi config set {{.KEY}} {{.VALUE}}
      - echo "✓ Set {{.KEY}} = {{.VALUE}} for {{.ENV}} stack"
    silent: true

  config:set-secret:
    desc: "Set a secret configuration value (e.g., task config:set-secret env=staging key=admin-user-arn value=arn:aws:iam::123:user/admin)"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
      KEY: '{{.key}}'
      VALUE: '{{.value}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi config set --secret {{.KEY}} {{.VALUE}}
      - echo "✓ Set secret {{.KEY}} for {{.ENV}} stack"
    silent: true

  config:get:
    desc: "Get a configuration value (e.g., task config:get env=staging key=node-disk-size)"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
      KEY: '{{.key}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - uv run pulumi config get {{.KEY}}
    silent: true

  config:list:
    desc: "List all configuration values for the current stack"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - uv run pulumi stack select {{.ENV}}
      - echo "=== Configuration for {{.ENV}} stack ==="
      - uv run pulumi config
    silent: true

  # Validation Tasks
  validate:
    desc: "Validate Pulumi configuration and code quality"
    cmds:
      - echo "=== Running Code Quality Checks ==="
      - task: check
      - echo "=== Validating Pulumi Configuration ==="
      - task: preview
        vars:
          env: '{{.env | default "staging"}}'
    silent: true

  # Quick aliases for backward compatibility
  plan:
    desc: "Alias for preview"
    cmds:
      - task: preview
        vars:
          env: '{{.env}}'

  apply:
    desc: "Alias for deploy"
    cmds:
      - task: deploy
        vars:
          env: '{{.env}}'
