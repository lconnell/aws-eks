# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, AWS EKS Pulumi Project!

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list
    silent: true

  # Setup Tasks
  setup:
    desc: "Complete setup: install dependencies and initialize stacks"
    cmds:
      - task: pulumi:deps
      - task: pulumi:sync
      - task: pulumi:init
        vars:
          env: staging
      - task: pulumi:init
        vars:
          env: production
    silent: true

  # Pulumi Dependencies
  pulumi:deps:
    desc: "Install Python dependencies for Pulumi using uv"
    dir: pulumi
    cmds:
      - uv venv
      - uv pip install -r requirements.txt
    silent: true

  pulumi:sync:
    desc: "Sync dependencies and create lock file using uv"
    dir: pulumi
    cmds:
      - uv pip compile requirements.txt -o requirements.lock
      - echo "✓ Created requirements.lock with pinned versions"
    silent: true

  # Pulumi Stack Management
  pulumi:init:
    desc: "Initialize a new Pulumi stack"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - pulumi stack init {{.ENV}} || pulumi stack select {{.ENV}}
      - pulumi config set aws:region us-east-1
    silent: true

  pulumi:select:
    desc: "Select a Pulumi stack"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - pulumi stack select {{.ENV}}
    silent: true

  # Infrastructure Management
  preview:
    desc: "Preview Pulumi changes for the selected environment"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - ENVIRONMENT={{.ENV}} pulumi preview
    silent: true

  deploy:
    desc: "Deploy Pulumi infrastructure for the selected environment"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - ENVIRONMENT={{.ENV}} pulumi up --yes
    silent: true

  destroy:
    desc: "Destroy Pulumi infrastructure for the selected environment"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - ENVIRONMENT={{.ENV}} pulumi destroy --yes
    silent: true

  # Stack Information
  outputs:
    desc: "Show Pulumi stack outputs"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - pulumi stack output
    silent: true

  status:
    desc: "Show Pulumi stack status"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - pulumi stack
    silent: true

  info:
    desc: "Show detailed Pulumi stack information"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - echo "=== Stack Information ==="
      - pulumi stack
      - echo ""
      - echo "=== Stack Outputs ==="
      - pulumi stack output
    silent: true

  config:
    desc: "Show Pulumi stack configuration"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - pulumi config
    silent: true

  refresh:
    desc: "Refresh Pulumi stack state"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - ENVIRONMENT={{.ENV}} pulumi refresh --yes
    silent: true

  # EKS Management Tasks
  eks:scale:
    desc: "Scale EKS node group to desired size"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
      DESIRED_SIZE: '{{.desiredSize | default "2"}}'
      MAX_SIZE: '{{.maxSize | default "3"}}'
      MIN_SIZE: '{{.minSize | default "1"}}'
    deps: [pulumi:select]
    cmds:
      - |
        CLUSTER_NAME=$(pulumi stack output cluster_name 2>/dev/null | tr -d '"')
        NODE_GROUP_NAME=$(pulumi stack output node_group_name 2>/dev/null | tr -d '"')
        REGION=$(pulumi config get aws:region)
        
        if [ -n "$CLUSTER_NAME" ] && [ -n "$NODE_GROUP_NAME" ]; then
          aws eks update-nodegroup-config \
            --region $REGION \
            --cluster-name $CLUSTER_NAME \
            --nodegroup-name $NODE_GROUP_NAME \
            --scaling-config minSize={{.MIN_SIZE}},maxSize={{.MAX_SIZE}},desiredSize={{.DESIRED_SIZE}}
          echo "Node group scaled to {{.DESIRED_SIZE}} nodes (min: {{.MIN_SIZE}}, max: {{.MAX_SIZE}})"
        else
          echo "Error: Could not get cluster or node group name from stack outputs"
          exit 1
        fi
    silent: true

  eks:kubeconfig:
    desc: "Configure kubectl to access the EKS cluster"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - |
        CLUSTER_NAME=$(pulumi stack output cluster_name 2>/dev/null | tr -d '"')
        REGION=$(pulumi config get aws:region)
        
        if [ -n "$CLUSTER_NAME" ]; then
          echo "Configuring kubectl for cluster: $CLUSTER_NAME"
          aws eks update-kubeconfig \
            --region $REGION \
            --name $CLUSTER_NAME \
            --alias $CLUSTER_NAME
          echo "kubectl configured successfully"
          echo "You can now run: kubectl get nodes"
        else
          echo "Error: Could not get cluster name from stack outputs"
          exit 1
        fi
    silent: true

  # AWS Tasks
  aws:whoami:
    desc: "Show details of the current AWS identity"
    cmds:
      - aws sts get-caller-identity
    silent: true

  # Kubernetes Tasks
  k8s:status:
    desc: "Show status of services and ingress"
    cmds:
      - echo "=== Nodes ==="
      - kubectl get nodes
      - echo ""
      - echo "=== Services ==="
      - kubectl get services
      - echo ""
      - echo "=== Ingresses ==="
      - kubectl get ingress 2>/dev/null || echo "No ingresses found"
      - echo ""
      - echo "=== Pods ==="
      - kubectl get pods --all-namespaces
    silent: true

  # ALB Tasks (to be implemented when ALB is added to Pulumi)
  alb:status:
    desc: "Show ALB information (to be implemented)"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - echo "ALB integration not yet implemented in Pulumi version"
      - echo "Current stack outputs:"
      - pulumi stack output
    silent: true

  alb:dns:instructions:
    desc: "Show DNS configuration instructions (to be implemented)"
    cmds:
      - echo "ALB DNS configuration not yet implemented in Pulumi version"
      - echo "This will be available after ALB integration is complete"
    silent: true

  # Development Tasks
  pulumi:cmd:
    desc: "Run any Pulumi command (e.g., task pulumi:cmd env=staging -- stack output cluster_name)"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - pulumi {{.CLI_ARGS}}
    silent: true

  logs:
    desc: "View Pulumi operation logs"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - pulumi logs --follow
    silent: true

  # Environment Setup
  env:copy:
    desc: "Copy .env.example to .env in pulumi directory"
    dir: pulumi
    cmds:
      - cp .env.example .env
      - echo "Environment file created at pulumi/.env"
      - echo "Please edit it with your specific configuration"
    silent: true

  env:show:
    desc: "Show current environment configuration"
    dir: pulumi
    cmds:
      - echo "=== Current .env configuration ==="
      - cat .env 2>/dev/null || echo "No .env file found. Run 'task env:copy' first."
    silent: true

  # Validation Tasks
  validate:
    desc: "Validate Pulumi configuration"
    dir: pulumi
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [pulumi:select]
    cmds:
      - echo "=== Validating Pulumi Configuration ==="
      - uv run python -m py_compile __main__.py
      - echo "✓ Python syntax is valid"
      - ENVIRONMENT={{.ENV}} pulumi preview --dry-run
      - echo "✓ Pulumi configuration is valid"
    silent: true

  # Quick aliases for backward compatibility
  plan:
    desc: "Alias for preview"
    cmds:
      - task: preview
        vars:
          env: '{{.env}}'

  apply:
    desc: "Alias for deploy"
    cmds:
      - task: deploy
        vars:
          env: '{{.env}}'