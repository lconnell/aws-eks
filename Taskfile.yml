# https://taskfile.dev

version: '3'

vars:
  GREETING: Hello, AWS EKS Project!

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list
    silent: true

  # Terraform Tasks
  terraform:plan:
    desc: "Generate Terraform execution plan for the selected environment"
    dir: terraform
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [terraform:workspace:select]
    cmds:
      - terraform plan -var-file="{{.ENV}}.tfvars" -out {{.ENV}}.tfplan
    silent: true

  terraform:apply:
    desc: "Apply Terraform changes from the execution plan"
    dir: terraform
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [terraform:workspace:select]
    cmds:
      - terraform apply {{.ENV}}.tfplan
    silent: true

  terraform:destroy:
    desc: "Destroy Terraform-managed infrastructure"
    dir: terraform
    vars:
      ENV: '{{.env | default "staging"}}'
    deps: [terraform:workspace:select]
    cmds:
      - terraform destroy -var-file="{{.ENV}}.tfvars"
    silent: true

  # EKS Management Tasks
  eks:scale:
    desc: "Scale EKS node group to desired size"
    dir: terraform
    vars:
      DESIRED_SIZE: '{{.desiredSize | default "2"}}'
      MAX_SIZE: '{{.maxSize | default "2"}}'
      MIN_SIZE: '{{.minSize | default "0"}}'
    cmds:
      - |
        aws eks update-nodegroup-config \
        --region $(terraform output -raw aws_region_configured) \
        --cluster-name $(terraform output -raw cluster_name) \
        --nodegroup-name $(terraform output -raw managed_node_group_id | cut -d ':' -f2) \
        --scaling-config minSize={{.MIN_SIZE}},maxSize={{.MAX_SIZE}},desiredSize={{.DESIRED_SIZE}}
    silent: true

  eks:kubeconfig:
    desc: "Configure kubectl to access the EKS cluster"
    dir: terraform
    cmds:
      - |
        aws eks update-kubeconfig \
        --region $(terraform output -raw aws_region_configured) \
        --name $(terraform output -raw cluster_name) \
        --alias $(terraform output -raw cluster_name)
    silent: true

  eks:kubectx:
    desc: "Switch kubectl context to the EKS cluster"
    dir: terraform
    cmds:
      - kubectl config use-context $(terraform output -raw cluster_name)
    silent: true

  # AWS Tasks
  aws:whoami:
    desc: "Show details of the current AWS identity"
    cmds:
      - aws sts get-caller-identity
    silent: true

  # S3 Backend Management Tasks
  backend:create:
    desc: "Create S3 bucket for Terraform state"
    dir: terraform-backend
    cmds:
      - terraform init
      - terraform apply -auto-approve
    silent: true

  backend:destroy:
    desc: "Destroy S3 bucket for Terraform state (WARNING: This will delete all state files!)"
    dir: terraform-backend
    cmds:
      - terraform destroy
    silent: true

  backend:info:
    desc: "Show S3 backend bucket information"
    dir: terraform-backend
    cmds:
      - terraform output
    silent: true

  backend:init:
    desc: "Initialize Terraform with S3 backend after bucket creation"
    dir: terraform-backend
    vars:
      BUCKET_NAME:
        sh: terraform output -raw bucket_name 2>/dev/null || echo ""
    preconditions:
      - sh: '[ -n "{{.BUCKET_NAME}}" ]'
        msg: "S3 bucket not found. Run 'task backend:create' first"
    cmds:
      - |
        cd ../terraform
        sed -i.bak 's/bucket[[:space:]]*=[[:space:]]*"[^"]*"/bucket = "{{.BUCKET_NAME}}"/g' backend.tf
        terraform init -reconfigure
    silent: true

  # Terraform Workspace Tasks
  terraform:workspace:init:
    desc: "Initialize workspaces for staging and production"
    dir: terraform
    preconditions:
      - sh: '[ -f .terraform/terraform.tfstate ]'
        msg: "Terraform not initialized. Run 'task backend:init' first"
    cmds:
      - terraform workspace new staging || true
      - terraform workspace new production || true
    silent: true

  terraform:workspace:select:
    desc: "Select a workspace (staging or production)"
    dir: terraform
    vars:
      ENV: '{{.env | default "staging"}}'
    cmds:
      - terraform workspace select {{.ENV}}
    silent: true

  # Terraform Validation and Formatting Tasks
  terraform:validate:
    desc: "Validate Terraform configuration"
    dir: terraform
    cmds:
      - terraform validate
    silent: true

  terraform:format:
    desc: "Format Terraform files"
    dir: terraform
    cmds:
      - terraform fmt
    silent: true

  terraform:format:check:
    desc: "Check if Terraform files are properly formatted"
    dir: terraform
    cmds:
      - terraform fmt -check
    silent: true

  # Quick Setup Tasks
  setup:
    desc: "Complete setup: create backend, initialize, and create workspaces"
    cmds:
      - task: backend:create
      - task: backend:init
      - task: terraform:workspace:init
    silent: true

  # Kubernetes Tasks
  k8s:deploy:samples:
    desc: "Deploy sample services (API and ArgoCD placeholders)"
    cmds:
      - kubectl apply -f kubernetes-manifests/sample-services.yaml
    silent: true

  k8s:delete:samples:
    desc: "Delete sample services"
    cmds:
      - kubectl delete -f kubernetes-manifests/sample-services.yaml --ignore-not-found=true
    silent: true

  k8s:status:
    desc: "Show status of services and ingress"
    cmds:
      - echo "=== Services ==="
      - kubectl get services
      - echo ""
      - echo "=== Ingresses ==="
      - kubectl get ingress
      - echo ""
      - echo "=== Pods ==="
      - kubectl get pods
    silent: true

  # ALB and Route 53 Tasks
  alb:status:
    desc: "Show ALB and Route 53 information"
    dir: terraform
    cmds:
      - |
        echo "=== ALB Configuration ==="
        terraform output domain_name
        terraform output service_urls
        echo ""
        echo "=== Route 53 Configuration ==="
        terraform output hosted_zone_id
        terraform output hosted_zone_name_servers
        echo ""
        echo "=== SSL Certificate ==="
        terraform output ssl_certificate_arn
    silent: true

  alb:dns:instructions:
    desc: "Show DNS configuration instructions"
    dir: terraform
    cmds:
      - |
        echo "=== DNS Configuration Instructions ==="
        echo "To complete the setup, update your domain's nameservers to:"
        terraform output -raw hosted_zone_name_servers
        echo ""
        echo "Or if using an existing domain, create NS records pointing to the above nameservers."
    silent: true

  # Shortcut aliases for common tasks (keeping backward compatibility)
  plan:
    desc: "Alias for terraform:plan"
    cmds:
      - task: terraform:plan
        vars:
          env: '{{.env}}'

  apply:
    desc: "Alias for terraform:apply"
    cmds:
      - task: terraform:apply
        vars:
          env: '{{.env}}'

  destroy:
    desc: "Alias for terraform:destroy"
    cmds:
      - task: terraform:destroy
        vars:
          env: '{{.env}}'